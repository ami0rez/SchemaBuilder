@page
@using SlickyCommonLibrary.Enums;
@model SchemaBuilder.Pages.Schema.Customer.CustomerDataModel
@{
    ViewBag.title = "customer";
}
<style>
    .info {
        margin-bottom: 6px;
    }

    .info-title {
        font-weight: bold;
    }

    .info-value {
    }

</style>
<section class="container-fluid container-mw-xxl chapter">
    <div class="section-header">
        <ol class="breadcrumb">
            <li>Schema </li>
            <li class="">Customer data</li>
        </ol>
    </div>

    <div class="section-body contain-lg">

        <div class="form" role="form">
            <div class="row">
                <div class="col-md-9">
                    <div class="box box-default users_read">
                        <div class="box-header style-standard">
                            General Information:
                        </div>
                        <div class="box-body style-default-bright form">
                            <div class="info">
                                <span class="info-title">Customer: </span> <span class="info-value" id="website"></span>
                            </div>
                            <div class="info">
                                <span class="info-title">Owner: </span> <span class="info-value" id="owner"></span>
                            </div>
                            <div class="info">
                                <span class="info-title">Business name: </span> <span class="info-value" id="businessName"></span>
                            </div>
                            <div class="info">
                                <span class="info-title">Category: </span> <span class="info-value" id="categoryName"></span>
                            </div>
                            <div class="info">
                                <span class="info-title">Phone: </span> <span class="info-value" id="phone"></span>
                            </div>
                            <div class="info">
                                <span class="info-title">Content richness: </span> <span class="info-value" id="contentRichness"></span>
                            </div>
                        </div>
                    </div>
                    <div class="box box-default users_read">
                        <div class="box-header style-standard">
                            Customer Pages
                        </div>
                        <div class="box-body style-default-bright form">
                            <div class="container" id="schemasContainer" style="display:none;">
                                <ul class="nav nav-tabs" id="myTabs">
                                </ul>
                                <div class="tab-content">
                                </div>
                            </div>
                            <div class="container" id="noCategoryContainer" style="display:none;">
                                <h5>Data is not ready yet.</h5>
                            </div>
                        </div>



                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section scripts
{
    <script src="~/js/libs/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/lib/json-viwer/jquery.json-viewer.js"></script>

}

@section DemoScripts
{
    <script>

        var SCHEMATYPES = [
        @foreach (var type in Enum.GetValues(typeof(Datatype)))
        {
            @: '@Enum.GetName(typeof(Datatype), type)',
        }
                                                            ];
        var customerInfo = {};
        var customerJson = {};
        var customerInfoId;
        var customerData = [];
        var requestDataResult;
        var tableFieldsContainer = {};
        var tableValuesContainer = {};
        (async () => {
            loadCustomerData();
        })();

        async function loadCustomerData(categoryId) {
            customerInfoId = getId();
            if (customerInfoId != '') {
                loadSpinnerAt(".box-body", false, true)
                var customerInfoPromis = getPromiseData("CustomerInfo", "id=" + customerInfoId);
                await loadPromise(customerInfoPromis, "customerInfo");
                customerInfo = customerInfo[0];

                var customerJsonPromis = getPromiseData("CustomerInfo/GetCustomerJson", "customerId=" + customerInfoId);
                await loadPromise(customerJsonPromis, "customerJson");
                customerJson = customerJson[0];
                customerData = JSON.parse(customerJson?.jsonData ?? "{}")
            }
            else {
                customerInfo.id = e7();
            }
            showCustomerData();
            unloadSpinnerAt(".box-body")
        }

        function showCustomerData() {
            $('#website').text(customerInfo.website);
            $('#owner').text(customerInfo.ownerName);
            $('#businessName').text(customerInfo.businessName);
            $('#categoryName').text(customerInfo.businessCategoryName);
            $('#phone').text(customerInfo.phone);
            $('#contentRichness').text(customerInfo.contentRichness + ' %');
            refreshPageTabs();
        }




        function refreshPageTabs() {
            if (customerData.pages) {
                $("#schemasContainer").show();
                $("#noCategoryContainer").hide();
                addPagesTabs();
            } else {
                $("#schemasContainer").hide();
                $("#noCategoryContainer").show();
                return;
            }
        }


        //#region List Display

        function addPagesTabs() {
            clearHtmlTabs();
            customerData.pages.forEach((page, index) => {
                var pageName = page.groupName;
                var pageDescription;
                var pageUrl;
                let pageId;
                var selectedPage = customerInfo.pages.filter(paged => paged.id == page.id);
                if (selectedPage && selectedPage.length) {
                    pageName = selectedPage[0].name;
                    pageId = selectedPage[0].id;
                    pageDescription = selectedPage[0].description;
                    pageUrl = selectedPage[0].url;
                }
                if (tableFieldsContainer[pageId] && Object.keys(tableFieldsContainer[pageId]).length) {
                    return;
                }

                tableFieldsContainer[pageId] = {}
                tableValuesContainer[pageId] = {}
                var content = '';
                page.schemaFields.forEach(schema => {
                    var schemaName = toPascalCase(schema.name);
                    var schemaValues = [];
                    tableFieldsContainer[pageId][schemaName] = generateSchemaTableFields(schema)
                    if (schema.values && schema.values.length == 1 && Array.isArray(schema.values[0])) {
                        schemaValues = schema.values[0]?.map(row => ({ id: e7(), ...row })) ?? [];
                    } else {
                        schemaValues = schema.values
                            ?.filter(row => row && Object.keys(row).length > 0 && Object.keys(row).some(objKey => row[objKey]))
                            .map(row => ({
                                '@@type': schema.name,
                                id: e7(),
                                ...row 
                            })) ?? [];
                    }
                    tableValuesContainer[pageId][schemaName] = schemaValues;
                    content += `
                                        <div class"row">
                                            <div id="details_${pageId}${schemaName}" class="content" style="display: none;">
                                                <h4>${toPlainText(schema.name)}</h4>
                                                <div id="schemaDisplay_${pageId}${schemaName}" class="row" style=" padding: 0 10px;">
                                                    <h5>Result JSON-LD</h5>
                                                        <div class="col-md-12" style=" border: solid thin #333; border-radius: 5px; margin: 0; background-color: #fff; position: relative;">
                                                        <pre id="jsonviewer_${pageId}${schemaName}" class="col-md-12"></pre>
                                                        <span style=" position: absolute; top: 10px; right: 10px; box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px; width: 30px; height: 30px; font-size: 1.3em; display: flex; justify-content: center; align-items: center; cursor: pointer; ">
                                                            <i id="copySchemaJsonLDBtn_${pageId}${schemaName}" class="fa fa-copy icon" data-icon="fa fa-copy"></i>
                                                        </span>
                                                        <span  onclick="toggleDetails('${pageId}${schemaName}')" style=" position: absolute; top: 10px; left: 6px; box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px; width: 30px; height: 30px; font-size: 1.3em; display: flex; justify-content: center; align-items: center; cursor: pointer; ">
                                                            <i class="fa fa-arrow-left" data-icon="fa-arrow-left"></i>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                            DATA
                                        </div>
                                        `;
                    if (schemaValues && schemaValues.length) {
                        content = content.replace("DATA", `
                            <div id="placeholder_${pageId}${schemaName}"></div>
                        `)
                    }else{
                        content = content.replace("DATA", `
                            <div id="placeholder_${pageId}${schemaName}"></div>
                            <div class="d-flex justify-content-center align-items-center border-bottom border-left border-right py-2">
                                <h5>Nothing to show</h5>
                            </div>
                        `)
                    }
                });
                addNewHtmlTab(page.id, pageName, content, pageDescription, pageUrl);
                Object.keys(tableFieldsContainer[pageId]).forEach(table => {
                    populateSubTable(`tableValuesContainer['${pageId}'].${table}`, `${pageId}${table}`, `tableFieldsContainer['${pageId}'].${table}`, defaultType, null, {
                        title: toPlainText(table),
                        hideAdd: true,
                        hideEdit: true,
                        hideDelete: true,
                        showSelect: true,
                        onSelect: (id, name, fieldname) => selectRow(id, name, pageId, table)
                    });
                });
            });
            openTab(customerData.pages[0].id);
        }
        function openTab(tabId) {
            var firstTabHeaderId = '#tab' + tabId + '-tab';
            var firstTabBodyId = '#tab' + tabId;
            $(firstTabHeaderId).addClass('active show')
            $(firstTabBodyId).addClass('active show')
        }
        function generateSchemaTableFields(schema) {
            var tableFields = schema.fields
                .map((field, index) => {
                    const fieldObject = {
                        title: getPropertyName(field),
                        type: 'text',
                        name: field.name
                    };

                    if (field.schemaRef) {
                        fieldObject.noTitle = true;
                    }

                    if (index >= 4) {
                        fieldObject.noTitle = true;
                    }

                    return fieldObject;
                });
            return tableFields
        }

        function getPropertyName(property) {
            if (property.friendlyName) {
                return property.friendlyName;
            }
            return toPlainText(property.name)
        }


        function toPascalCase(inputText) {
            const words = inputText.split(/\s+/);
            const pascalCaseWords = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));
            const pascalCaseText = pascalCaseWords.join('');

            return pascalCaseText;
        }

        function toPlainText(casedString) {
            const plainText = casedString.replace(/([a-z])([A-Z])/g, '$1 $2');
            return plainText.charAt(0).toUpperCase() + plainText.slice(1).toLowerCase();
        }

        function clearHtmlTabs() {
            $('#myTabs').empty();
            $('.tab-content').empty();
        }


        function addNewHtmlTab(tabIndex, name, content, description, url) {
            var newTabLink = $('<a>', {
                'class': 'nav-link',
                'id': 'tab' + tabIndex + '-tab',
                'data-toggle': 'tab',
                'href': '#tab' + tabIndex
            }).text(name);

            var newTabContent = $('<div>', {
                'class': 'tab-pane fade',
                'id': 'tab' + tabIndex
            }).html(
                `   <div>
                        <h4>Url</h4>
                        <div><a href="${url}">${url}</a></div>
                    </div>
                    <div>
                        <h4>Description</h4>
                        <div>${description}</div>
                    </div>
                    <div class="mt-4">
                        <div id="listContainer_${tabIndex}">
                            ${content}
                        </div>
                    </div>
                    
                `
            );
            $('#myTabs').append($('<li>', {
                'class': 'nav-item'
            }).append(newTabLink));

            $('.tab-content').append(newTabContent);
        }

        function selectRow(id, name, pageName, schemaName) {
            toggleDetails(name)
            showSchemasWithData(id, name, pageName, schemaName)
        }

        function toggleDetails(id) {
            const placeholder = $(`#placeholder_${id}`);
            const details = $(`#details_${id}`);

            if (placeholder.is(":visible")) {
                // If placeholder is visible, fade it out and show details
                placeholder.animate({ opacity: 0 }, 500, function () {
                    $(this).hide().css("opacity", 1);
                    details.show().animate({ opacity: 1 }, 500);
                });
            } else if (details.is(":visible")) {
                // If details is visible, fade it out and show placeholder
                details.animate({ opacity: 0 }, 500, function () {
                    $(this).hide().css("opacity", 1);
                    placeholder.show().animate({ opacity: 1 }, 500);
                });
            }
        }

        //#endregion

        //#region Json Display

        function showSchemasWithData(id, name, pageName, schemaName) {

            var fullschemas = tableValuesContainer[pageName][schemaName].find(data => data.id == id);
            $(`#copySchemaJsonLDBtn_${name}`).attr('onclick', `copySchemaJsonLD('${id}','${pageName}','${schemaName}')`);
            renderJson(name, fullschemas);
        }

        function renderJson(name, input) {
            var options = {
                collapsed: false,
                rootCollapsable: false,
                withQuotes: false,
                withLinks: true,
                footer: '<span><</span>/script<span>></span>',
                header: '<span><</span>script type="application/ld+json"<span>></span>'
            };
            $(`#jsonviewer_${name}`).jsonViewer(input, options);
        }


        function copySchemaJsonLD(id, pageName, schemaName) {
            var schemaObject = tableValuesContainer[pageName][schemaName].find(data => data.id == id);

            var jsonString = JSON.stringify(schemaObject, null, 2);
            jsonString = `<script type="application/ld+json">\n${jsonString}\n<\/script>`

            // Create a temporary textarea to copy the text to the clipboard
            var textarea = document.createElement('textarea');
            textarea.value = jsonString;
            textarea.setAttribute('readonly', '');
            textarea.style.position = 'absolute';
            textarea.style.left = '-9999px';

            // Append the textarea to the body
            document.body.appendChild(textarea);

            // Select the text in the textarea
            textarea.select();
            textarea.setSelectionRange(0, jsonString.length);

            // Copy the selected text to the clipboard
            document.execCommand('copy');

            // Remove the textarea from the DOM
            document.body.removeChild(textarea);

            toastr.success('Json Schema copied successfully')
        }
        //#endregion
    </script>
}

@section css
{
    <link type="text/css" rel="stylesheet" href="~/lib/json-viwer/jquery.json-viewer.css" />
}