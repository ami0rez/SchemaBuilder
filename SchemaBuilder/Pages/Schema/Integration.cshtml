@page
@using SlickyCommonLibrary.Enums;
@model SchemaBuilder.Pages.Schema.IntegrationModel
@{
    ViewBag.title = "title";
}

<section class="container-fluid container-mw-xxl chapter">
    <div class="section-header">
        <ol class="breadcrumb">
            <li>Schema </li>
            <li class="">Integration</li>
        </ol>
    </div>

    <div class="section-body contain-lg">

        <div class="form" role="form">
            <div class="row">
                <div class="col-md-9">
                    <div class="box box-default users_read">
                        <div class="box-header style-standard">
                            Select Category:
                        </div>
                        <div class="box-body style-default-bright form d-flex-row">
                            <input id="categoryId" type="text" class="form-control rounded-right d-flex-grow" />
                            <div id="loader" class="d-flex-center" style="margin-bottom: -12px;"></div>
                        </div>
                    </div>
                    <div class="box box-default users_read">
                        <div class="box-header style-standard">
                            Schema Editor
                        </div>
                        <div class="box-body style-default-bright form">
                            <div class="container" id="schemasContainer" style="display:none;">
                                <ul class="nav nav-tabs" id="myTabs">
                                </ul>
                                <div class="tab-content">
                                </div>
                            </div>
                            <div class="container" id="noCategoryContainer">
                                <h5>Select a Category to start editing</h5>
                            </div>
                        </div>



                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section scripts
    {
    <script src="~/js/libs/jquery-ui/jquery-ui.min.js"></script>
    <script src="~/lib/json-viwer/jquery.json-viewer.js"></script>

}

@section DemoScripts
    {
    <script>

        var SCHEMATYPES = [
        @foreach (var type in Enum.GetValues(typeof(Datatype)))
        {
            @: '@Enum.GetName(typeof(Datatype), type)',
        }
                                                    ];

        var categories = [];
        var sections = [];
        var websiteGroupSchema = [];
        var categoryGroup = [];
        var schemas = [];
        var masterSchemas = [];
        var Properties = [];
        var depth = 0;
        var fieldsNames = [];
        var WebGrpSchemaList = {};
        var mySavedCookie = [];


        (async () => {
            intializeAutocomplete();
        })();

        async function loadCategoryData(categoryId) {
            var myWebsiteSectionPromise = getPromiseData("WebsiteSection", "categoryId=" + categoryId);
            await loadPromise(myWebsiteSectionPromise, "sections");

            var groupNames = sections.map(section => section.groupName);
            var distinctGroupNames = groupNames.filter(function (item, index) {
                return groupNames.indexOf(item) === index;
            }).join(',');

            var myWebsiteGroupSchemaPromise = getPromiseData("WebsiteGroupSchema", "groupNameList=" + distinctGroupNames);
            await loadPromise(myWebsiteGroupSchemaPromise, "websiteGroupSchema");

            var wgShemaIds = websiteGroupSchema.map(wgShema => wgShema.schemaId);
            var distinctShemaIds = wgShemaIds.filter(function (item, index) {
                return wgShemaIds.indexOf(item) === index;
            }).join(',');

            var mySchemaPromise = getPromiseData("Schema", "showLevel1Properties=true&idList=" + wgShemaIds);
            await loadPromise(mySchemaPromise, "schemas");
            schemas.sort((a, b) => (a > b) ? 1 : -1);

        }

        function showAutocompleteSpinner() {
            $('#loader').css('width', '5rem');
            loadSpinnerAt("#loader")
        }

        function hideAutocompleteSpinner() {
            $('#loader').css('width', 'fit-content');
            unloadSpinnerAt("#loader")
        }
        function intializeAutocomplete() {
            $("#categoryId").autocomplete({
                source: async function (request, response) {
                    showAutocompleteSpinner();
                    var myPromise = getPromiseData("Category", "name=" + request.term);
                    await loadPromise(myPromise, "categories");
                    if (!categories || !categories.length) {
                        toastr.error(`No Category found with name containing '${request.term}'`)
                        return;
                    }
                    hideAutocompleteSpinner();
                    var categoriesData = categories.map((categ) => ({
                        label: categ.name,
                        value: categ.id
                    }));
                    response(categoriesData);
                },
                select: async function (event, ui) {
                    event.preventDefault();
                    $("#categoryId").val(ui.item.label);
                    await loadCategoryData(ui.item.value)
                    refreshSelectedWebGrpSchema(ui.item.value)
                },
            });
        }

        function refreshSelectedWebGrpSchema(categoryId) {
            if (categoryId) {
                clearHtmlTabs();
                $("#schemasContainer").show();
                $("#noCategoryContainer").hide();
            } else {
                $("#schemasContainer").hide();
                $("#noCategoryContainer").show();
                return;
            }

            if (sections.length > 0) {
                schemas.forEach(el => {
                    displayWebsiteGroupSchemaFields(el);
                });
                openTab(schemas[0].id)
            }
        }

        function openTab(tabId) {
            var firstTabHeaderId = '#tab' + tabId + '-tab';
            var firstTabBodyId = '#tab' + tabId;
            $(firstTabHeaderId).addClass('active show')
            $(firstTabBodyId).addClass('active show')
        }
        function displayWebsiteGroupSchemaFields(schema) {
            var schemaValid = verifyWebGrpSchema(schema);
            if (schemaValid) {
                addWebGrpSchemaTab(schema)
            }
        }

        function verifyWebGrpSchema(schema) {
            friendlyName = schema.friendlyName ?? schema.name;
            if (schema.properties == null) {
                console.log("--> It looks like we have a problem with this model name:" + friendlyName + ", model id: " + model.id);
                return false;
            }
            return true;
        }

        function addWebGrpSchemaTab(schema) {

            var friendlyName = "";
            var schemaId = schema.id;

            WebGrpSchemaList[schemaId] = schema;

            friendlyName = schema.friendlyName ?? schema.name;
            var content = getWebGrpSchemaProperties(schema);
            addNewHtmlTab(schemaId, friendlyName, content)
        }

        function getWebGrpSchemaProperties(schema) {

            var properties = [];
            var schemaId = schema.id;

            properties = schema.properties;

            var propertiesHtml = '';
            properties.forEach(element => {
                if (element.visible)
                    if (element.datatype != 4) {
                        fieldsNames.push(schemaId + '_' + element.name + '_1');
                        propertiesHtml += `
                                                    <div class="${schemaId} col-md-12">
                                                        <div class="form-group">
                                                            <label for="${schemaId}_${element.name}">${element.friendlyName ?? element.name}</label>
                                                            <input type="text" class="form-control" id="${schemaId}_${element.name}">
                                                        </div>
                                                    </div>
                                                    `;
                    }
            });
            propertiesHtml += `
                                                <button class="ml-3 ant-btn btn-cta btn-primary btn-spinner" onClick="showSchemasWithData('${schemaId}')">Show Schema with data</button>
                                    `;
            return propertiesHtml;

        }

        function addNewHtmlTab(tabIndex, name, content) {
            // Create new tab link and content
            var newTabLink = $('<a>', {
                'class': 'nav-link',
                'id': 'tab' + tabIndex + '-tab',
                'data-toggle': 'tab',
                'href': '#tab' + tabIndex
            }).text(name);

            var newTabContent = $('<div>', {
                'class': 'tab-pane fade',
                'id': 'tab' + tabIndex
            }).html(
                `
                            <h5>Schema Properties</h5>
                            <div id="SchemaProperties_${tabIndex}" class="row">
                                ${content}
                            </div>
                            <br/>
                            <br/>
                            <div id="schemaDisplay_${tabIndex}" class="row" style=" padding: 0 10px;display:none;">
                                <h5>Result JSON-LD</h5>
                                <div class="col-md-12" style=" border: solid thin #333; border-radius: 5px; margin: 0; background-color: #fff; position: relative;">
                                    <pre id="jsonviewer_${tabIndex}" class="col-md-12"></pre>
                                    <span style=" position: absolute; top: 10px; right: 10px; box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px; width: 30px; height: 30px; font-size: 1.3em; display: flex; justify-content: center; align-items: center; cursor: pointer; ">
                                        <i class="fa fa-copy icon" data-icon="fa fa-copy" onclick="copySchemaJsonLD('${tabIndex}')"></i>
                                    </span>
                                </div>
                            </div>
                        `
            );

            // Append new tab link and content
            $('#myTabs').append($('<li>', {
                'class': 'nav-item'
            }).append(newTabLink));

            $('.tab-content').append(newTabContent);

            // Activate the new tab
            //newTabLink.tab('show');
        }

        function clearHtmlTabs() {
            $('#myTabs').empty();
            $('.tab-content').empty();
        }

        function copySchemaJsonLD(schemaId) {
            var mySchemData = WebGrpSchemaList[schemaId];
            var schemaObject = generateJSONObject(mySchemData, {});

            var jsonString = JSON.stringify(schemaObject, null, 2);
            jsonString = `<script type="application/ld+json">\n${jsonString}\n<\/script>`

            // Create a temporary textarea to copy the text to the clipboard
            var textarea = document.createElement('textarea');
            textarea.value = jsonString;
            textarea.setAttribute('readonly', '');
            textarea.style.position = 'absolute';
            textarea.style.left = '-9999px';

            // Append the textarea to the body
            document.body.appendChild(textarea);

            // Select the text in the textarea
            textarea.select();
            textarea.setSelectionRange(0, jsonString.length);

            // Copy the selected text to the clipboard
            document.execCommand('copy');

            // Remove the textarea from the DOM
            document.body.removeChild(textarea);
        }

        function showSchemasWithData(schemaId) {

            var mySchemData = WebGrpSchemaList[schemaId];
            var fullschemas = generateJSONObject(mySchemData, {});

            $(`#schemaDisplay_${schemaId}`).show();
            renderJson(schemaId, fullschemas);
        }

        function renderJson(schemaId, input) {
            var options = {
                collapsed: false,
                rootCollapsable: false,
                withQuotes: false,
                withLinks: true,
                footer: '<span><</span>/script<span>></span>',
                header: '<span><</span>script type="application/ld+json"<span>></span>'
            };
            $(`#jsonviewer_${schemaId}`).jsonViewer(input, options);
        }

        function generateJSONObject(schema) {
            let result = {

                "@@type": schema.name
            };
            var properties = schema.properties;
            properties.forEach(property => {
                // Map data types from enum to string
                const dataTypeMapping = {
                    0: 'text',
                    1: 'boolean',
                    2: 'number',
                    3: 'date',
                    4: 'schema',
                    5: 'time',
                    6: 'datetime'
                };

                // Get the data type for the property
                const dataType = dataTypeMapping[property.datatype];

                // Convert the property value to the appropriate data type
                let value = $(`#${schema.id}_${property.name}`).val() ?? '';
                switch (dataType) {
                    case 'boolean':
                        value = Boolean(value) ?? '';
                        break;
                    case 'number':
                        value = Number(value) ?? '';
                        break;
                    default:
                        value = value ?? '';
                }

                // Add the property to the result JSON
                result[property.name] = value;
            });
            return result;
        }

        function saveClientSchemas() {
            mySavedCookie = [];
            fieldsNames.forEach(x => {
                var xvalue = $('#' + x).val();
                if (xvalue != null && xvalue.length > 0) {
                    var myCookie = { id: x, value: xvalue };
                    mySavedCookie.push(myCookie);
                }
            });

            showSchemasWithData()
        }

        function spaces(count) {
            var line = "&nbsp; ";
            for (var i = 0; i < count; i++) {
                line += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ";
            }
            return line;
        }

    </script>
}

@section css
    {
    <link type="text/css" rel="stylesheet" href="~/lib/json-viwer/jquery.json-viewer.css" />
}