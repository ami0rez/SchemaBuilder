@page
@using SlickyCommonLibrary.Enums;
@model SchemaBuilder.Pages.Schema.GroupBuilderModel
@{
    ViewBag.title = "title";
}

<style>
    .collapsible {
        border: 1px solid #ddd;
        margin: 10px;
    }

    .collapsible-header {
        padding: 10px;
        cursor: pointer;
        background-color: #f1f1f1;
    }

    .collapsible-content {
        display: none;
        padding: 10px;
    }
</style>
<section class="container-fluid container-mw-xxl chapter">
    <div class="section-header">
        <ol class="breadcrumb">
            <li>Schema </li>
            <li class="">Group Builder</li>
        </ol>
    </div>

    <div class="section-body contain-lg">

        <div class="form" role="form">
            <div class="row">
                <div class="col-md-9">
                    <div class="box box-default users_read">
                        <div class="box-header style-standard">
                            Select Category
                        </div>
                        <div class="box-body style-default-bright form">
                            <input id="categoryId" type="text" class="form-control rounded-right" />
                        </div>
                    </div>
                    <div class="box box-default users_read">
                        <div class="box-header style-standard">
                            Groups
                        </div>
                        <div class="box-body style-default-bright form">
                            <div class="container" id="schemasContainer">
                                <ul class="nav nav-tabs" id="myTabs">
                                </ul>
                                <div class="tab-content">
                                </div>
                            </div>
                            <div class="row" style="display:none;">
                                <div class="col-7" id="categorySections">
                                </div>
                                <div class="col-5">
                                    <div id="mySchemas"></div>
                                </div>
                                <div class="col-4"></div>
                                <div class="col-7">
                                    <a class="btn btn-md u-btn-primary g-font-weight-600 g-font-size-12 text-uppercase slickyButton g-mt-20 g-mb-20" href="javascript:;" onclick="saveGroupSchemas(); return false;">
                                        Save Selection
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</section>

@section scripts
    {
    <script src="~/js/libs/jquery-ui/jquery-ui.min.js"></script>
}
@section DemoScripts
    {
    <script>


        var SCHEMATYPES = [
        @foreach (var type in Enum.GetValues(typeof(Datatype)))
        {
            @: '@Enum.GetName(typeof(Datatype), type)',
        }
                        ];

        var categories = [];
        var sections = [];
        var websiteGroupSchema = [];
        var webGroupSchemasLinks = {};
        var schemas = [];
        var masterSchemas = [];
        var allProperties = {};
        var groupList = [];

        (async () => {
            intializeAutocomplete();
        })();

        function slideToggle(event) {
            $(event).siblings(".collapsible-content").slideToggle();
        }

        function intializeAutocomplete() {
            $("#categoryId").autocomplete({
                source: async function (request, response) {
                    var myPromise = getPromiseData("Category", "name=" + request.term);
                    await loadPromise(myPromise, "categories");
                    if (!categories || !categories.length) {
                        toastr.error(`No Category found with name containing '${request.term}'`)
                        return;
                    }
                    var categoriesData = categories.map((categ) => ({
                        label: categ.name,
                        value: categ.id
                    }));
                    response(categoriesData);
                },
                select: async function (event, ui) {
                    event.preventDefault();
                    $("#categoryId").val(ui.item.label);
                    await loadCategoryData(ui.item.value)
                    showCategorySections(ui.item.value)
                },
            });
        }

        async function loadCategoryData(categoryId) {
            var myWebsiteSectionPromise = getPromiseData("WebsiteSection", "categoryId=" + categoryId);
            await loadPromise(myWebsiteSectionPromise, "sections");

            var groupNames = sections.map(section => section.groupName);
            var distinctGroupNames = groupNames.filter(function (item, index) {
                return groupNames.indexOf(item) === index;
            }).join(',');

            var myWebsiteGroupSchemaPromise = getPromiseData("WebsiteGroupSchema", "groupNameList=" + distinctGroupNames);
            await loadPromise(myWebsiteGroupSchemaPromise, "websiteGroupSchema");

            var wgShemaIds = websiteGroupSchema.map(wgShema => wgShema.schemaId);
            var distinctShemaIds = wgShemaIds.filter(function (item, index) {
                return wgShemaIds.indexOf(item) === index;
            }).join(',');

            var mySchemaPromise = getPromiseData("Schema", "showLevel1Properties=true&idList=" + wgShemaIds);
            await loadPromise(mySchemaPromise, "schemas");
            schemas.sort((a, b) => (a > b) ? 1 : -1);
            filterSchemas();

        }

        function filterSchemas() {
            masterSchemas = schemas.filter(mySchema => mySchema.master)
        }

        function addNewHtmlTab(tabIndex, name, content) {
            // Create new tab link and content
            var newTabLink = $('<a>', {
                'class': 'nav-link',
                'id': 'tab' + tabIndex + '-tab',
                'data-toggle': 'tab',
                'href': '#tab' + tabIndex
            }).text(name);

            var newTabContent = $('<div>', {
                'class': 'tab-pane fade',
                'id': 'tab' + tabIndex
            }).html(content);

            // Append new tab link and content
            $('#myTabs').append($('<li>', {
                'class': 'nav-item'
            }).append(newTabLink));

            $('.tab-content').append(newTabContent);

            // Activate the new tab
            newTabLink.tab('show');
        }

        function generateGroupeContent(groupId, sections, schemas) {
            var content = `
                    <div id="sections_${groupId}">
                        <div class="d-flex-center-h-start">
                            <div class="d-flex-grow">
                                ${sections}
                            </div>
                                    <button class="ml-3 ant-btn btn-cta btn-primary btn-spinner" onclick="saveGroupSchemas('${groupId}')">Save Schemas Visibility</button>
                        </div>
                    </div>
                    <br/>
                    <br/>
                    <div id="masterSchemas_${groupId}" class="row" style=" padding: 0 10px;">
                    <h5>Sechemas</h5>
                        ${schemas}
                    </div>
                    `
            return content;
        }

        function showCategorySections(categoryId) {
            const categorySections = sections.filter(section => section.categoryID === categoryId);
            const groupedSections = categorySections.reduce((groups, section) => {
                const key = section.groupName;

                if (!groups[key]) {
                    groups[key] = [];
                }

                groups[key].push(section);
                return groups;
            }, {});
            const orderedGroups = Object.keys(groupedSections).sort();

            $(`#categorySections`).html('');
            orderedGroups.forEach(group => {
                allProperties[group] = {}
                var groupOptionTemplate = `
                                <div>
                                    Sections:
                                    <text>
                                        <small>
                                            OPTIONS_GROUPED_SECTIONS
                                        </small>
                                            <br>
                                    </text>
                                </div>
                                `;

                var optionsGroupedSection = '';
                groupedSections[group].forEach(mySection => {
                    optionsGroupedSection += (optionsGroupedSection ? ' ,' : '') + mySection.name
                })

                groupOptionTemplate = groupOptionTemplate.replace('OPTIONS_GROUPED_SECTIONS', optionsGroupedSection);
                var sectionContrent = getGroupSchemas(group);
                var content = generateGroupeContent(group, groupOptionTemplate, sectionContrent)
                addNewHtmlTab(group, group, content)
                //$(`#categorySections`).append(groupOptionTemplate);
            })



        }

        function getGroupSchemas(groupId) {
            var mySchemas = '';
            var groupSchemas = websiteGroupSchema.filter(gSchema => gSchema.groupName == groupId);
            webGroupSchemasLinks[groupId] = [];
            for (var i = 0; i < masterSchemas.length; i++) {
                var schemaProperties = getSchemaProperties(masterSchemas[i].id, groupId);
                var myGroupSchema = groupSchemas.find(groupSchema => groupSchema.schemaId == masterSchemas[i].id);
                if (myGroupSchema){
                    webGroupSchemasLinks[groupId].push(myGroupSchema);
                }
                mySchemas += `
                        <div class="collapsible" style="width: 100%" >
                            <div class="collapsible-header" onclick="slideToggle($(this))">
                                    <div >
                                    <input
                                        type="checkbox"
                                        id="val_${groupId}_${masterSchemas[i].id}"
                                                ${myGroupSchema ? 'checked' : ''}
                                        value="` + masterSchemas[i].id + `"
                                        style="width:50px" onClick="toggleSchemaToGroup('` + groupId + `','` + masterSchemas[i].id + `');event.stopPropagation();">
                                        <a href='#' onClick="showProperties('` + masterSchemas[i].id + `');return false;">` + masterSchemas[i].name + `</a>
                                </div>
                            </div>
                            <div class="collapsible-content">
                                ${schemaProperties}
                            </div>
                        </div>`
            }
            return mySchemas;
        }

        function getSchemaProperties(schemaId, groupId) {
            var template = `
                            <div class="row">
                                <div class="col-md-12 ">
                                    <div class="d-flex-center-h-start mb-4">
                                        <div class="d-flex-grow">
                                            <h5>Select Visible Properties</h5>
                                        </div>
                                        <button class="ml-3 ant-btn btn-cta btn-primary btn-spinner" onclick="saveProperties('${schemaId}', '${groupId}')">Save Changes</button>
                                    </div>
                                </div>
                                <div class="col-md-12 ">
                                    <div class="row" id="mySchemaProperty">
                                          MY_SCHEMA_PPROPERTIES
                                    </div>
                                </div>
                            </div>
                    `;
            var data = schemas.filter(mySchema => mySchema.id == schemaId);
            var mySchemaProperty = '';
            if (schemas.length > 1) {
                var properties = data[0].properties;
                allProperties[groupId][schemaId] = properties;
                Properties = properties;
                for (var i = 0; i < properties.length; i++) {
                    var isChecked = properties[i].visible ? "checked" : "";
                    var isBold = SCHEMATYPES[properties[i].datatype] == "_schema" ? " style='font-weight:800;padding-bottom:10px;'" : "style='padding-bottom:10px;'";
                    var showDetails = SCHEMATYPES[properties[i].datatype] == "_schema" ? "style='display:none;'" : "";
                    var myDiv = `<div class='col-4' ` + isBold + `><input type="checkbox" id="prop_` + properties[i].id + `" ` + isChecked + ` value="` + properties[i].id + `"  style="width:50px" onClick="toggleProperty('${schemaId}', '${groupId}', '${properties[i].id}', $(this).prop('checked'));" > ` + properties[i].name + `</div><div class='col - 3'><span ` + showDetails + `>  [ ` + SCHEMATYPES[properties[i].datatype] + ` ] </span></div>`;
                    myDiv += `<div class='col-5'> <input type=text id=id="friend_` + properties[i].id + `" value="` + (properties[i].friendlyName ?? '') + `" style="width:200px;" onChange="updatePropertyFriendlyName('${schemaId}', '${groupId}', '${properties[i].id}', $(this).val());">  </div>`;
                    mySchemaProperty += myDiv;
                }
            }
            var propertiesContent = template.replace('MY_SCHEMA_PPROPERTIES', mySchemaProperty)
            return propertiesContent;
        }

        function toggleSchemaToGroup(groupId, schemaID) {
            var myGroups = webGroupSchemasLinks[groupId].filter(x => x.groupName == groupId && x.schemaId == schemaID);
            if (myGroups.length > 0)
                webGroupSchemasLinks[groupId] = webGroupSchemasLinks[groupId].filter(x => !(x.groupName == groupId && x.schemaId == schemaID)).map(x => ({ ...x, id: e7() }));
            else {
                webGroupSchemasLinks[groupId].push({ groupName: groupId, schemaId: schemaID, id: e7() });
            }
        }

        function toggleProperty(schemaId, groupId, id, isChecked) {
            var myProp = allProperties[groupId][schemaId].find(x => x.id == id);
            myProp.visible = isChecked;
        }

        function updatePropertyFriendlyName(schemaId, groupId, id, value) {
            var myProp = allProperties[groupId][schemaId].find(x => x.id == id);
            myProp.friendlyName = value;
        }

        function saveProperties(schemaId, groupId) {
            var properties = allProperties[groupId][schemaId];
            ajaxCall("PUT", properties, "SchemaProperty", "Properties Saved");
        }

        function saveGroupSchemas(groupId) {
            var websiteGroups = webGroupSchemasLinks[groupId];
            ajaxCall("PUT", websiteGroups, "WebsiteGroupSchema", "Groups Saved");
        }

    </script>
}